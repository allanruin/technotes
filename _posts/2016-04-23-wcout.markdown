---
layout: post
title:  "wcout的正确使用方式"
subtitle:   ""  
date:       2016-04-23
author:     "allanruin"
header-img: "img/posthead/post-bg-js-module.jpg"
<!-- header-mask: 0.5 -->
<!-- catalog: true -->
tags:
    - cpp
    - 中文

---

之前我都是简单使用wcout，替换原来的cout就这么用，后来发觉莫名其妙地有一部分就是不显示，而且也不报错。而且一旦出错连后面的对wcout的调用也直接就不工作。太久没用C++，都忘了输出流这个坑爹的特性了。后来查stackoverflow有人提到才发现。。

wcout内部使用一个wfilebuf，将宽字符（wchar）转换成char代码然后写到文件流里（stdout）。转换根据语言locale设定里的`codecvt`完成。默认就是调用`wctomb_s`，将宽字符转换成默认的ANSI codepage， 既`CP_ACP`。

一旦给wcout非法的UNICODE数据，wcout就进入到一个坏状态，坑的是，默认是不会丢出异常，只是静静地把内部的`failbit`或者`badbit`设置为真。我们可以用`std::wcout.fail()`检测失败状态。可以用` std::wcout.clear()`清楚内部的错误标志位。

以为这样就好了么，天真。关键来了，喜闻乐见的非英语环境输入输出都有坑，还得这么设置：

``` c++
  locale::global(locale(""));
  wcout.imbue(locale(""));
```

这篇[博客](http://www.cnblogs.com/zyl910/archive/2013/01/20/wchar_crtbug_01.html)的解释：

1. `locale("")`：调用构造函数创建一个local，其中的空字符串具有特殊含义：使用客户环境中缺省的locale（《C++标准程序库—自修教程与参考手册》P697）。例如在简体中文系统上，会返回简体中文的locale。
2. `locale::global(locale(""))`：将“C++标准IO库的全局locale”设为“客户环境中缺省的locale”。注意它还会设置C标准库的locale环境，造成与`setlocale(LC_ALL, "")`类似的效果（《C++标准程序库—自修教程与参考手册》P698）。


终于不用每次都依赖`wprintf`了

``` c++
wprintf(L"%.*s\n",  len_of_w_string, a_w_string);
```